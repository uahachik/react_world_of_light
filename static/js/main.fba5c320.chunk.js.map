{"version":3,"sources":["layout/saving.png","layout/buildings.svg","layout/house.png","components/PowerPlant.js","components/Power.js","components/Household.js","components/House.js","connectivity/connectionHhToPp.js","connectivity/connectionHhToHh.js","components/World.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PowerPlant","props","react_default","a","createElement","className","onClick","onPowerPlant","style","width","height","marginTop","Fragment","children","Power","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getKilledColor","bind","assertThisInitialized","getKilledImage","power","isAlive","backgroundColor","src","saving","alt","buildings","_this2","lib","animationIn","onClickHandler","key","onDragOver","e","onDrop","React","Component","Household","onHousehold","House","getElectricity","electricity","includes","house","draggable","onDragStart","connectionHhToPp","dropID","targetID","powerPlants","households","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","pp","value","Number","ppConnect","push","forEach","item","hasElectricity","reduce","count","i","filter","err","return","connectionHhToHh","hh","connect","hasConnectedToHH","World","state","maxHousehold","maxPowerPlant","numHousehold","numPowerPlant","createHousehold","createPowerPlant","connectivity","killRepairPowerPlant","householdHasElectricity","newHousehold","supply","setState","concat","toConsumableArray","newPowerPlant","ppSupply","_this$state","map","sorted_arr","res","sort","length","diff","inc","ev","id","dataTransfer","setData","preventDefault","getData","_this$state2","connectDisconnectHouseholdToPowerplant","connectDisconnectHouseholdToHousehold","newElectricity","houses","components_House","plants","components_Power","components_Household","components_PowerPlant","App","components_World","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oMCsBzBC,EApBI,SAACC,GAChB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,UACIE,QAASL,EAAMM,aACfC,MAAO,CAACC,MAAM,QAAQC,OAAO,OAAOC,UAAU,SAFlD,sBAMAT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,0BAAhB,wMAMAH,EAAAC,EAAAC,cAACF,EAAAC,EAAMS,SAAP,KAAiBX,EAAMY,sDCmDpBC,cA5DX,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjB,KACDqB,eAAiBP,EAAKO,eAAeC,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IACtBA,EAAKU,eAAiBV,EAAKU,eAAeF,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IAHPA,gFAOjB,OAAGG,KAAKjB,MAAMyB,MAAMC,QACT,CACHC,gBAAiB,QAGd,CACHA,gBAAiB,oDAMvB,OAAGV,KAAKjB,MAAMyB,MAAMC,QAEZzB,EAAAC,EAAAC,cAAA,OACIyB,IAAKC,IACLC,IAAI,2BACJvB,MAAO,CAACC,MAAO,UAKnBP,EAAAC,EAAAC,cAAA,OACIyB,IAAKG,IACLD,IAAI,2BACJvB,MAAO,CAACC,MAAO,2CAKtB,IAAAwB,EAAAf,KACL,OACIhB,EAAAC,EAAAC,cAAC8B,EAAA,SAAD,CAAUC,YAAY,cAClBjC,EAAAC,EAAAC,cAAA,UACIE,QAASY,KAAKjB,MAAMmC,eAAeb,KAAKL,KAAMA,KAAKjB,MAAMyB,MAAMW,KAC/D7B,MAAOU,KAAKI,iBACZgB,WAAY,SAAAC,GAAC,OAAEN,EAAKhC,MAAMqC,WAAWC,IACrCC,OAAQ,SAAAD,GAAC,OAAEN,EAAKhC,MAAMuC,OAAOD,EAAGN,EAAKhC,MAAMyB,MAAMW,OAEhDnB,KAAKO,0BA/CNgB,IAAMC,WCgBXC,EArBG,SAAC1C,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,UACIE,QAASL,EAAM2C,YACfpC,MAAO,CAACC,MAAM,QAAQC,OAAO,OAAOC,UAAU,SAFlD,oBAMAT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,yQAOAH,EAAAC,EAAAC,cAACF,EAAAC,EAAMS,SAAP,KAAiBX,EAAMY,6BCiCpBgC,cA7CP,SAAAA,EAAY5C,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IACf9B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,KAAMjB,KACD6C,eAAiB/B,EAAK+B,eAAevB,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IAFPA,gFAMnB,OAAGG,KAAKjB,MAAM8C,YAAYC,SAAS9B,KAAKjB,MAAMgD,MAAMZ,KACrC,CACHT,gBAAiB,QAGlB,CACHA,gBAAiB,4CAIpB,IAAAK,EAAAf,KACL,OACIhB,EAAAC,EAAAC,cAAC8B,EAAA,SAAD,CAAUC,YAAY,cAClBjC,EAAAC,EAAAC,cAAA,UACII,MAAOU,KAAK4B,iBACZI,WAAS,EACTC,YAAa,SAAAZ,GAAC,OAAEN,EAAKhC,MAAMkD,YAAYZ,EAAGN,EAAKhC,MAAMgD,MAAMZ,MAE3DC,WAAY,SAAAC,GAAC,OAAEN,EAAKhC,MAAMqC,WAAWC,IACrCC,OAAQ,SAAAD,GAAC,OAAEN,EAAKhC,MAAMuC,OAAOD,EAAGN,EAAKhC,MAAMgD,MAAMZ,OAEjDnC,EAAAC,EAAAC,cAAA,OACIyB,IAAKoB,IACLlB,IAAI,mBACJvB,MAAO,CAACC,MAAO,mBA/BnBgC,IAAMC,WC4BXU,MAjCf,SAA0BC,EAAQC,EAAUC,EAAaC,GAAY,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACjE,QAAAC,EAAAC,EAAgBP,EAAhBQ,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA6B,KAAnBU,EAAmBN,EAAAO,MACzB,GAAID,EAAG9B,MAAQgC,OAAOf,IAAaA,EAAW,KAAqB,IAAfa,EAAGxC,QAAkB,KAC9D2C,EAAaH,EAAbG,WAEoC,IAAvCA,EAAUtB,SAASqB,OAAOhB,KAE1BiB,EAAUC,KAAKF,OAAOhB,IAEtBG,EAAWgB,QAAQ,SAAAC,GACXA,EAAKpC,MAAQgC,OAAOhB,KACpBoB,EAAKC,gBAAiB,OAQD,IAJCnB,EAAYoB,OAAO,SAACC,EAAOC,GACrD,OAAOA,EAAEP,UAAUtB,SAASqB,OAAOhB,IAAWuB,GAAS,EAAIA,GAC5D,IAGCpB,EAAWgB,QAAQ,SAAAC,GACZA,EAAKpC,MAAQgC,OAAOhB,KACnBoB,EAAKC,gBAAiB,KAKlCP,EAAGG,UAAYA,EAAUQ,OAAO,SAAAL,GAAI,OAAIA,IAASJ,OAAOhB,QA3BH,MAAA0B,GAAArB,GAAA,EAAAC,EAAAoB,EAAA,YAAAtB,GAAA,MAAAK,EAAAkB,QAAAlB,EAAAkB,SAAA,WAAAtB,EAAA,MAAAC,KCgDtDsB,MAhDf,SAA0B5B,EAAQC,EAAUE,GAAY,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAwBpD,QAAAC,EAAAC,EAAgBN,EAAhBO,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA4B,KAAlByB,EAAkBrB,EAAAO,MACjBe,EAAWD,EAAXC,QACHD,EAAG7C,MAAQgC,OAAOf,IAAaA,EAAW,KAA4B,IAAtB4B,EAAGR,kBACV,IAArCS,EAAQnC,SAASqB,OAAOhB,KAExB6B,EAAGC,QAAQZ,KAAKF,OAAOhB,IACvBG,EAAWgB,QAAQ,SAAAC,GACZA,EAAKpC,MAAQgC,OAAOhB,KACnBoB,EAAKW,kBAAmB,OAKhCF,EAAGC,QAAUA,EAAQL,OAAO,SAAAL,GAAI,OAAIA,IAASJ,OAAOhB,KACpDG,EAAWgB,QAAQ,SAAAC,GACZA,EAAKpC,MAAQgC,OAAOhB,KACnBoB,EAAKW,kBAAmB,QAxCQ,MAAAL,GAAArB,GAAA,EAAAC,EAAAoB,EAAA,YAAAtB,GAAA,MAAAK,EAAAkB,QAAAlB,EAAAkB,SAAA,WAAAtB,EAAA,MAAAC,KC4NzC0B,cAnNX,SAAAA,EAAYpF,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmE,IACftE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqE,GAAAhE,KAAAH,KAAMjB,KACDqF,MAAQ,CACTvC,YAAa,GACbS,WAAY,GACZ+B,aAAc,GACdC,cAAe,GACfC,aAAc,GACdC,cAAe,GACfnC,YAAa,IAEjBxC,EAAK4E,gBAAkB5E,EAAK4E,gBAAgBpE,KAArBP,OAAAQ,EAAA,EAAAR,CAAAD,IACvBA,EAAK6E,iBAAmB7E,EAAK6E,iBAAiBrE,KAAtBP,OAAAQ,EAAA,EAAAR,CAAAD,IACxBA,EAAK8E,aAAe9E,EAAK8E,aAAatE,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IACpBA,EAAK+E,qBAAuB/E,EAAK+E,qBAAqBvE,KAA1BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC5BA,EAAKgF,wBAA0BhF,EAAKgF,wBAAwBxE,KAA7BP,OAAAQ,EAAA,EAAAR,CAAAD,IAfhBA,iFAmBf,IAAMiF,EAAe,CACjBb,QAAS,GACTC,kBAAkB,EAClBV,gBAAgB,EAChBrC,IAAKnB,KAAKoE,MAAMG,aAChBQ,OAAQ,IAET/E,KAAKoE,MAAMG,cAAgBvE,KAAKoE,MAAMC,aAAe,GACpDrE,KAAKgF,SAAS,CACVT,aAAcvE,KAAKoE,MAAMG,aAAe,EACxCjC,WAAU,GAAA2C,OAAAnF,OAAAoF,EAAA,EAAApF,CAAME,KAAKoE,MAAM9B,YAAjB,CAA6BwC,iDAM/C,IAAMK,EAAgB,CAClB/B,UAAW,GACX3C,SAAS,EACTU,IAAKnB,KAAKoE,MAAMI,cAChBY,SAAU,IAEXpF,KAAKoE,MAAMI,eAAiBxE,KAAKoE,MAAME,cAAgB,GACtDtE,KAAKgF,SAAS,CACVR,cAAexE,KAAKoE,MAAMI,cAAgB,EAC1CnC,YAAW,GAAA4C,OAAAnF,OAAAoF,EAAA,EAAApF,CAAME,KAAKoE,MAAM/B,aAAjB,CAA8B8C,mDAKhChE,GAAK,IAAAkE,EACYrF,KAAKoE,MAAhC/B,EADegD,EACfhD,YAAaC,EADE+C,EACF/C,WAGpBtC,KAAKgF,SAAS,CACV3C,YAAaA,EAAYiD,IAAI,SAAArC,GACzB,GAAGA,EAAG9B,MAAQA,EAIV,GAFA8B,EAAGxC,SAAWwC,EAAGxC,SAEC,IAAfwC,EAAGxC,QAAkB,CACpB,IAAI8E,EAAa,GACbC,EAAM,GACVnD,EAAYiB,QAAQ,SAAAC,GAChBgC,EAAa,GAAAN,OAAAnF,OAAAoF,EAAA,EAAApF,CAAIyF,GAAJzF,OAAAoF,EAAA,EAAApF,CAAmByD,EAAKH,YAAWqC,SAIpD,IAAK,IAAI9B,EAAI,EAAGA,EAAI4B,EAAWG,OAAS,EAAG/B,IACnC4B,EAAW5B,EAAI,KAAO4B,EAAW5B,IACjC6B,EAAInC,KAAKkC,EAAW5B,IAK5B,IAAMgC,EAAOJ,EAAW3B,OAAO,SAAAL,GAAI,OAA2B,IAAvBiC,EAAI1D,SAASyB,KAG9CqC,EAAM3C,EAAGG,UAAUQ,OAAO,SAAAL,GAAI,OAAIoC,EAAK7D,SAASyB,KAGtDjB,EAAWgB,QAAQ,SAAAK,GACZiC,EAAI9D,SAAS6B,EAAExC,OAEdwC,EAAEH,gBAAiB,KAK3BP,EAAGmC,SAAHtF,OAAAoF,EAAA,EAAApF,CAAkBmD,EAAGG,WACrBH,EAAGG,UAAUsC,OAAS,OAED,IAAfzC,EAAGxC,UAETwC,EAAGG,UAAHtD,OAAAoF,EAAA,EAAApF,CAAmBmD,EAAGmC,UACtBnC,EAAGmC,SAASM,OAAS,EAErBpD,EAAWgB,QAAQ,SAAAK,GACRV,EAAGG,UAAUtB,SAAS6B,EAAExC,OACvBwC,EAAEH,gBAAiB,MAMvC,OAAOP,MAKfjD,KAAK6E,wBAAwBxC,EAAaC,uCAMlCuD,EAAIC,GACZD,EAAGE,aAAaC,QAAQ,KAAMF,sCAGvBD,GACPA,EAAGI,sDAGMJ,EAAIzD,GACb,IAAMD,EAAS0D,EAAGE,aAAaG,QAAQ,MADhBC,EAEWnG,KAAKoE,MAAhC/B,EAFgB8D,EAEhB9D,YAAaC,EAFG6D,EAEH7D,WAGpB8D,EACIjE,EACAC,EACAC,EACAC,GAIJ+D,EACIlE,EACAC,EACAE,GAKJtC,KAAK6E,wBAAwBxC,EAAaC,mDAGtBD,EAAaC,GACjC,IAAIgE,EAAiB,GACrBjE,EAAYiB,QAAQ,SAAAC,GAChB+C,EAAc,GAAArB,OAAAnF,OAAAoF,EAAA,EAAApF,CAAOwG,GAAPxG,OAAAoF,EAAA,EAAApF,CAA0ByD,EAAKH,cAEjDpD,KAAKgF,SAAS,CAACnD,YAAayE,IAE5BhE,EAAWgB,QAAQ,SAAAU,IACU,IAAtBA,EAAGR,eACsB,IAArBQ,EAAGe,OAAOW,SACT1B,EAAGC,QAAHnE,OAAAoF,EAAA,EAAApF,CAAiBkE,EAAGe,QACpBf,EAAGe,OAAOW,OAAS,GAGE,IAAtB1B,EAAGC,QAAQyB,SACV1B,EAAGe,OAAHjF,OAAAoF,EAAA,EAAApF,CAAgBkE,EAAGC,SACnBD,EAAGC,QAAQyB,OAAS,GAG5BY,EAAc,GAAArB,OAAAnF,OAAAoF,EAAA,EAAApF,CAAOwG,GAAPxG,OAAAoF,EAAA,EAAApF,CAA0BkE,EAAGC,YAE/CjE,KAAKgF,SAAS,CAACnD,YAAayE,qCAK5B,IADA,IAAMC,EAAS,GACN5C,EAAI,EAAGA,EAAI3D,KAAKoE,MAAMG,aAAe,GAAIZ,IAC9C4C,EAAOlD,KACHrE,EAAAC,EAAAC,cAACsH,EAAD,CACIrF,IAAKwC,EACL5B,MAAO/B,KAAKoE,MAAM9B,WAAWqB,GAC7B9B,YAAa7B,KAAKoE,MAAMvC,YACxBI,YAAajC,KAAKiC,YAClBb,WAAYpB,KAAKoB,WACjBE,OAAQtB,KAAK2E,gBAMzB,IADA,IAAM8B,EAAS,GACN9C,EAAI,EAAGA,EAAI3D,KAAKoE,MAAMI,cAAgB,GAAIb,IAC/C8C,EAAOpD,KACHrE,EAAAC,EAAAC,cAACwH,EAAD,CACIvF,IAAKwC,EACLnD,MAAOR,KAAKoE,MAAM/B,YAAYsB,GAC9BzC,eAAgBlB,KAAK4E,qBACrBxD,WAAYpB,KAAKoB,WACjBE,OAAQtB,KAAK2E,gBAKzB,OACQ3F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACyH,EAAD,CAAWjF,YAAa1B,KAAKyE,iBACxB8B,GAELvH,EAAAC,EAAAC,cAAC0H,EAAD,CAAYvH,aAAcW,KAAK0E,kBAC1B+B,WA9MLjF,mBCOLqF,MAVf,SAAa9H,GACT,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAC4H,EAAD,QCIQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOrI,EAAAC,EAAAC,cAACoI,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fba5c320.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/saving.4d40eac7.png\";","module.exports = __webpack_public_path__ + \"static/media/buildings.5e68755d.svg\";","module.exports = __webpack_public_path__ + \"static/media/house.b2d3c123.png\";","import React from 'react';\r\n\r\nconst PowerPlant = (props) => {\r\n    return (\r\n        <div className=\"World-Component\">\r\n            <button\r\n                onClick={props.onPowerPlant}\r\n                style={{width:'150px',height:'40px',marginTop:'20px'}}\r\n            >\r\n                Create Power Plant\r\n            </button>\r\n            <span className=\"Rules PowerPlantsRules\">\r\n                Each Power Plant is Alive by default but can be killed\r\n                and repaired after (click Power Plant).\r\n                Power plant which is not Alive doesn't generate any electricity,\r\n                but all connectivities still remain.\r\n            </span>\r\n            <React.Fragment>{props.children}</React.Fragment>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PowerPlant;","import React from 'react';\r\nimport saving from \"../layout/saving.png\";\r\nimport buildings from \"../layout/buildings.svg\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Animated } from \"react-animated-css\";\r\n\r\n\r\nclass Power extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getKilledColor = this.getKilledColor.bind(this);\r\n        this.getKilledImage = this.getKilledImage.bind(this);\r\n    }\r\n\r\n    getKilledColor() {\r\n      if(this.props.power.isAlive) {\r\n          return {\r\n              backgroundColor: 'blue'\r\n          }\r\n      } else {\r\n          return {\r\n              backgroundColor: '#2e2e2e'\r\n          }\r\n      }\r\n    };\r\n\r\n    getKilledImage() {\r\n        if(this.props.power.isAlive) {\r\n            return (\r\n                <img\r\n                    src={saving}\r\n                    alt=\"I'm an alive PowerPlant!\"\r\n                    style={{width: '50px'}}\r\n                />\r\n            );\r\n        } else {\r\n            return (\r\n                <img\r\n                    src={buildings}\r\n                    alt=\"I'm a killed PowerPlant!\"\r\n                    style={{width: '50px'}}\r\n                />\r\n            );\r\n        }\r\n    };\r\n    render() {\r\n        return (\r\n            <Animated animationIn=\"bounceInUp\">\r\n                <button\r\n                    onClick={this.props.onClickHandler.bind(this, this.props.power.key)}\r\n                    style={this.getKilledColor()}\r\n                    onDragOver={e=>this.props.onDragOver(e)}\r\n                    onDrop={e=>this.props.onDrop(e, this.props.power.key)}\r\n                >\r\n                    {this.getKilledImage()}\r\n                </button>\r\n            </Animated>\r\n        );\r\n    }\r\n}\r\n\r\nPower.propTypes = {\r\n    power: PropTypes.object.isRequired,\r\n    onDragOver: PropTypes.func.isRequired,\r\n    onClickHandler: PropTypes.func.isRequired,\r\n    onDrop: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Power;\r\n","import React from 'react';\r\n\r\nconst Household = (props) => {\r\n    return (\r\n        <div className=\"World-Component\">\r\n            <button\r\n                onClick={props.onHousehold}\r\n                style={{width:'150px',height:'40px',marginTop:'20px'}}\r\n            >\r\n                Create Household\r\n            </button>\r\n            <span className=\"Rules HouseholdRules\">\r\n                Any number of Households can be connected to any number of Power Plants\r\n                which are Alive (drag & drop from Household to Power Plant),\r\n                or to any number of other Households\r\n                which have been connected to Power Plant\r\n                (drag & drop from Household to another Household).\r\n            </span>\r\n            <React.Fragment>{props.children}</React.Fragment>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Household;","import React from 'react';\r\nimport house from \"../layout/house.png\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Animated } from \"react-animated-css\";\r\n\r\nclass House extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.getElectricity = this.getElectricity.bind(this);\r\n        }\r\n\r\n    getElectricity() {\r\n        if(this.props.electricity.includes(this.props.house.key)) {\r\n                return {\r\n                    backgroundColor: 'blue'\r\n                }\r\n        } else {\r\n            return {\r\n                backgroundColor: '#2e2e2e'\r\n            }\r\n        }\r\n    };\r\n    render() {\r\n        return (\r\n            <Animated animationIn=\"bounceInUp\">\r\n                <button\r\n                    style={this.getElectricity()}\r\n                    draggable\r\n                    onDragStart={e=>this.props.onDragStart(e, this.props.house.key)}\r\n\r\n                    onDragOver={e=>this.props.onDragOver(e)}\r\n                    onDrop={e=>this.props.onDrop(e, this.props.house.key)}\r\n                >\r\n                    <img\r\n                        src={house}\r\n                        alt=\"I'm a Household!\"\r\n                        style={{width: '50px'}}\r\n                    />\r\n                </button>\r\n            </Animated>\r\n        );\r\n    }\r\n}\r\n\r\nHouse.propTypes = {\r\n    house: PropTypes.object.isRequired,\r\n    onDragOver: PropTypes.func.isRequired,\r\n    onDragStart: PropTypes.func.isRequired,\r\n    onDrop: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default House;\r\n","function connectionHhToPp(dropID, targetID, powerPlants, households) {\r\n    for(const pp of powerPlants) {\r\n        if (pp.key === Number(targetID) && targetID < 19 && pp.isAlive === true) {\r\n            const {ppConnect} = pp;\r\n            // create a \"ppConnect\" household's array for every powerplant\r\n            if (ppConnect.includes(Number(dropID)) !== true) {\r\n                // add household to the array\r\n                ppConnect.push(Number(dropID));\r\n                // household \"hasElectricity\" be true\r\n                households.forEach(item => {\r\n                    if (item.key === Number(dropID)) {\r\n                        item.hasElectricity = true;\r\n                    }\r\n                });\r\n            } else {\r\n                const countOfHasElectricity = powerPlants.reduce((count, i) => {\r\n                    return i.ppConnect.includes(Number(dropID)) ? count += 1 : count;\r\n                }, 0);\r\n                // if household has been connected only to one powerPlant, it's \"hasElectricity\" be false\r\n                if(countOfHasElectricity === 1) {\r\n                    households.forEach(item => {\r\n                        if(item.key === Number(dropID)) {\r\n                            item.hasElectricity = false;\r\n                        }\r\n                    });\r\n                }\r\n                // remove household from the array\r\n                pp.ppConnect = ppConnect.filter(item => item !== Number(dropID));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default connectionHhToPp;\r\n","function connectionHhToHh(dropID, targetID, households) {\r\n    /*households.forEach(hh => {\r\n        const {connect} = hh;\r\n        if (hh.key === Number(targetID) && targetID > 19 && hh.hasElectricity === true) {\r\n            if (connect.includes(Number(dropID)) !== true) {\r\n                // add household\r\n                hh.connect.push(Number(dropID));\r\n                households.forEach(item => {\r\n                    if(item.key === Number(dropID)) {\r\n                        item.hasConnectedToHH = true;\r\n                    }\r\n                });\r\n            } else {\r\n                // remove household\r\n                hh.connect = connect.filter(item => item !== Number(dropID));\r\n                households.forEach(item => {\r\n                    if(item.key === Number(dropID)) {\r\n                        item.hasConnectedToHH = false;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });*/\r\n    // households.forEach(hh => {\r\n    for(const hh of households) {\r\n        const {connect} = hh;\r\n        if (hh.key === Number(targetID) && targetID > 19 && hh.hasElectricity === true) {\r\n            if (connect.includes(Number(dropID)) !== true) {\r\n                // add household\r\n                hh.connect.push(Number(dropID));\r\n                households.forEach(item => {\r\n                    if(item.key === Number(dropID)) {\r\n                        item.hasConnectedToHH = true;\r\n                    }\r\n                });\r\n            } else {\r\n                // remove household\r\n                hh.connect = connect.filter(item => item !== Number(dropID));\r\n                households.forEach(item => {\r\n                    if(item.key === Number(dropID)) {\r\n                        item.hasConnectedToHH = false;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default connectionHhToHh;\r\n","import React, {Component} from 'react';\r\nimport PowerPlant from './PowerPlant'\r\nimport Power from './Power';\r\nimport Household from './Household';\r\nimport House from './House';\r\nimport connectDisconnectHouseholdToPowerplant from '../connectivity/connectionHhToPp';\r\nimport connectDisconnectHouseholdToHousehold from '../connectivity/connectionHhToHh';\r\n\r\nclass World extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            electricity: [],\r\n            households: [],\r\n            maxHousehold: 27,\r\n            maxPowerPlant: 15,\r\n            numHousehold: 20,\r\n            numPowerPlant: 10,\r\n            powerPlants: [],\r\n        };\r\n        this.createHousehold = this.createHousehold.bind(this);\r\n        this.createPowerPlant = this.createPowerPlant.bind(this);\r\n        this.connectivity = this.connectivity.bind(this);\r\n        this.killRepairPowerPlant = this.killRepairPowerPlant.bind(this);\r\n        this.householdHasElectricity = this.householdHasElectricity.bind(this);\r\n    }\r\n\r\n    createHousehold() {\r\n        const newHousehold = {\r\n            connect: [],\r\n            hasConnectedToHH: false,\r\n            hasElectricity: false,\r\n            key: this.state.numHousehold,\r\n            supply: []\r\n        }\r\n        if(this.state.numHousehold <= this.state.maxHousehold - 1) {\r\n            this.setState({\r\n                numHousehold: this.state.numHousehold + 1,\r\n                households: [...this.state.households, newHousehold]\r\n            });\r\n        }\r\n    }\r\n\r\n    createPowerPlant() {\r\n        const newPowerPlant = {\r\n            ppConnect: [],\r\n            isAlive: true,\r\n            key: this.state.numPowerPlant,\r\n            ppSupply: []\r\n        }\r\n        if(this.state.numPowerPlant <= this.state.maxPowerPlant - 1) {\r\n            this.setState({\r\n                numPowerPlant: this.state.numPowerPlant + 1,\r\n                powerPlants: [...this.state.powerPlants, newPowerPlant],\r\n            });\r\n        }\r\n    }\r\n\r\n    killRepairPowerPlant(key) {\r\n        const {powerPlants, households} = this.state;\r\n\r\n        // powerPlants alive change\r\n        this.setState({\r\n            powerPlants: powerPlants.map(pp => {\r\n                if(pp.key === key) {\r\n                    // kill/repair power plant\r\n                    pp.isAlive = !pp.isAlive;\r\n\r\n                    if(pp.isAlive !== true) {\r\n                        let sorted_arr = [];\r\n                        let res = [];\r\n                        powerPlants.forEach(item => {\r\n                            sorted_arr = [...sorted_arr, ...item.ppConnect].sort();\r\n                        });\r\n\r\n                        // household has been connected more than to one powerPlant\r\n                        for (let i = 0; i < sorted_arr.length - 1; i++) {\r\n                            if (sorted_arr[i + 1] === sorted_arr[i]) {\r\n                                res.push(sorted_arr[i]);\r\n                            }\r\n                        }\r\n\r\n                        // household has been connected only to one powerPlant\r\n                        const diff = sorted_arr.filter(item => res.includes(item) === false);\r\n\r\n                        // check if powerPlants.ppConnect includes household to change \"hasElectricity\"\r\n                        const inc = pp.ppConnect.filter(item => diff.includes(item));\r\n\r\n                        // households \"hasElectricity\" change to false\r\n                        households.forEach(i => {\r\n                            if(inc.includes(i.key)) {\r\n                                // console.log(\"HiHiHI\");\r\n                                i.hasElectricity = false;\r\n                            }\r\n                        });\r\n\r\n                        // send households to the supply in order to connect after\r\n                        pp.ppSupply = [...pp.ppConnect];\r\n                        pp.ppConnect.length = 0;\r\n\r\n                    } else if(pp.isAlive === true) {\r\n                        // come back households to connect\r\n                        pp.ppConnect = [...pp.ppSupply];\r\n                        pp.ppSupply.length = 0;\r\n                        // households \"hasElectricity\" change to true\r\n                        households.forEach(i => {\r\n                                if(pp.ppConnect.includes(i.key)) {\r\n                                    i.hasElectricity = true;\r\n                                }\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n                return pp;\r\n            })\r\n        });\r\n\r\n        // update \"electicity\" after alive has been changed\r\n        this.householdHasElectricity(powerPlants, households);\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------- Drag & Drop Section -------------------------------- //\r\n    onDragStart(ev, id) {\r\n        ev.dataTransfer.setData(\"id\", id);\r\n    }\r\n\r\n    onDragOver(ev) {\r\n        ev.preventDefault();\r\n    }\r\n\r\n    connectivity(ev, targetID) {\r\n        const dropID = ev.dataTransfer.getData(\"id\");\r\n        const {powerPlants, households} = this.state;\r\n\r\n        // connect/disconnect household to powerPlant\r\n        connectDisconnectHouseholdToPowerplant(\r\n            dropID,\r\n            targetID,\r\n            powerPlants,\r\n            households\r\n        );\r\n\r\n        // connect/disconnect household to household\r\n        connectDisconnectHouseholdToHousehold(\r\n            dropID,\r\n            targetID,\r\n            households\r\n        );\r\n        // ----------------------------------------------------------------------------------- //\r\n\r\n        // update \"electicity\" after Drag & Drop\r\n        this.householdHasElectricity(powerPlants, households);\r\n    }\r\n\r\n    householdHasElectricity(powerPlants, households) {\r\n        let newElectricity = [];\r\n        powerPlants.forEach(item => {\r\n            newElectricity = [...newElectricity, ...item.ppConnect];\r\n        });\r\n        this.setState({electricity: newElectricity});\r\n\r\n        households.forEach(hh => {\r\n            if(hh.hasElectricity === true) {\r\n                if(hh.supply.length !== 0) {\r\n                    hh.connect = [...hh.supply];\r\n                    hh.supply.length = 0;\r\n                }\r\n            } else {\r\n                if(hh.connect.length !== 0) {\r\n                    hh.supply = [...hh.connect];\r\n                    hh.connect.length = 0;\r\n                }\r\n            }\r\n            newElectricity = [...newElectricity, ...hh.connect];\r\n        });\r\n        this.setState({electricity: newElectricity});\r\n    }\r\n\r\n    render() {\r\n        const houses = [];\r\n        for (let i = 0; i < this.state.numHousehold - 20; i ++) {\r\n            houses.push(\r\n                <House\r\n                    key={i}\r\n                    house={this.state.households[i]}\r\n                    electricity={this.state.electricity}\r\n                    onDragStart={this.onDragStart}\r\n                    onDragOver={this.onDragOver}\r\n                    onDrop={this.connectivity}\r\n                />\r\n            );\r\n        }\r\n\r\n        const plants = [];\r\n        for (let i = 0; i < this.state.numPowerPlant - 10; i ++) {\r\n            plants.push(\r\n                <Power\r\n                    key={i}\r\n                    power={this.state.powerPlants[i]}\r\n                    onClickHandler={this.killRepairPowerPlant}\r\n                    onDragOver={this.onDragOver}\r\n                    onDrop={this.connectivity}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n                <div className=\"World-Container\">\r\n                    <Household onHousehold={this.createHousehold}>\r\n                        {houses}\r\n                    </Household>\r\n                    <PowerPlant onPowerPlant={this.createPowerPlant}>\r\n                        {plants}\r\n                    </PowerPlant>\r\n                </div>\r\n        );\r\n    }\r\n}\r\nexport default World;\r\n","import React from \"react\";\r\nimport World from \"./components/World\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App(props) {\r\n    return (\r\n        <div className=\"World\">\r\n            <World>\r\n                {/*{props.tiles.map(row => row.map(tile => <EnvTile value={tile} />))}*/}\r\n            </World>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import './index.css';\nimport './App.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}